# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: userdata
# Description: –ú–æ–¥—É–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ Telegram
# Author: Fl1yd
# Commands:
# .name | .bio | .username
# ---------------------------------------------------------------------------------


import os

from telethon.errors.rpcerrorlist import UsernameOccupiedError
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest

from .. import loader, utils


def register(cb):
    cb(UserDataMod())


class UserDataMod(loader.Module):
    """–ú–æ–¥—É–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ Telegram"""

    strings = {"name": "UserData"}

    async def namecmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .name –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –∏–º—è."""
        args = utils.get_args_raw(message).split("/")
        if not args:
            return await message.edit("–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        if len(args) == 1:
            firstname = args[0]
            lastname = " "
        elif len(args) == 2:
            firstname = args[0]
            lastname = args[1]
        await message.client(
            UpdateProfileRequest(first_name=firstname, last_name=lastname)
        )
        await message.edit("<b>‚ú®–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>")

    async def biocmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .bio –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –±–∏–æ."""
        args = utils.get_args_raw(message)
        if not args:
            return await message.edit("–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        await message.client(UpdateProfileRequest(about=args))
        await message.edit("<b>üíô–ë–∏–æ –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>")

    async def usernamecmd(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ .username –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –±–∏–æ."""
        args = utils.get_args_raw(message)
        if not args:
            return await message.edit("–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        try:
            await message.client(UpdateUsernameRequest(args))
            await message.edit("<b>üçã–Æ–∑–µ—Ä–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>")
        except UsernameOccupiedError:
            await message.edit("<b>‚ùå–¢–∞–∫–æ–π —é–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!</b>")